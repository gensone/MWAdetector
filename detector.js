console.log("DETECTOR INJECTED"); (function(exports) { var slice = [].slice; var toString = {}.toString; function HookerOverride(v) { this.value = v; } function HookerPreempt(v) { this.value = v; } function HookerFilter(c, a) { this.context = c; this.args = a; } exports.override = function(value) { return new HookerOverride(value); }; exports.preempt = function(value) { return new HookerPreempt(value); }; exports.filter = function(context, args) { return new HookerFilter(context, args); }; function forMethods(obj, props, callback) { var prop; if (typeof props === "string") { props = [props]; } else if (props == null) { props = []; for (prop in obj) { if (obj.hasOwnProperty(prop)) { props.push(prop); } } } var i = props.length; while (i--) { if (toString.call(obj[props[i]]) !== "[object Function]" || callback(obj, props[i]) === false) { props.splice(i, 1); } } return props; } exports.hook = function(obj, props, options) { if (options == null) { options = props; props = null; } if (typeof options === "function") { options = {pre: options}; } return forMethods(obj, props, function(obj, prop) { var orig = obj[prop]; function hooked() { var result, origResult, tmp; var args = slice.call(arguments); if (options.passName) { args.unshift(prop); } if (options.pre) { result = options.pre.apply(this, args); } if (result instanceof HookerFilter) { origResult = result = orig.apply(result.context, result.args); } else if (result instanceof HookerPreempt) { origResult = result = result.value; } else { origResult = orig.apply(this, arguments); result = result instanceof HookerOverride ? result.value : origResult; } if (options.post) { tmp = options.post.apply(this, [origResult].concat(args)); if (tmp instanceof HookerOverride) { result = tmp.value; } } if (options.once) { exports.unhook(obj, prop); } return result; } obj[prop] = hooked; if (obj[prop] !== hooked) { return false; } obj[prop]._orig = orig; }); }; exports.orig = function(obj, prop) { return obj[prop]._orig; }; exports.unhook = function(obj, props) { return forMethods(obj, props, function(obj, prop) { var orig = exports.orig(obj, prop); if (!orig) { return false; } obj[prop] = orig; }); }; }(typeof exports === "object" && exports || this)); function getScript() { var e = new Error(); var trace = e.stack.split('\n'); url = trace[3].split("@"); ret = url[1].split(":"); ret2 = ret.slice(0, ret.length-2); ret3 = ret2.join(":"); return(ret3); } hook(navigator.geolocation, 'watchPosition',function(){window.dispatchEvent(new CustomEvent('getChromeData', {detail:'position'}))}); hook(navigator.geolocation, 'getCurrentPosition',function(){window.dispatchEvent(new CustomEvent('getChromeData', {detail:'position'}))}); hook(navigator, 'vibrate',function(){window.dispatchEvent(new CustomEvent('getChromeData', {detail:'vibration'}))});hook(navigator.mediaDevices, 'getUserMedia',function(){window.dispatchEvent(new CustomEvent('getChromeData', {detail:'media'}))});hook(window,"addEventListener",function() { var array = ['deviceproximity','userproximity','devicelight','deviceorientation', 'deviceorientationabsolute', 'devicemotion']; if (array.indexOf(arguments[0]) >= 0 ){ if (arguments[0] == 'deviceorientation' || arguments[0] == 'deviceorientationabsolute'){ window.dispatchEvent(new CustomEvent("getChromeData", {detail: "deviceorientation"})); } if (arguments[0] == 'devicemotion'){ window.dispatchEvent(new CustomEvent("getChromeData", {detail: "devicemotion"})); }if (arguments[0] == 'devicelight'){ window.dispatchEvent(new CustomEvent("getChromeData", {detail: "light"})); } if (arguments[0] == 'deviceproximity' || arguments[0] == 'userproximity' ){ window.dispatchEvent(new CustomEvent("getChromeData", {detail: "proximity"})); } } }); hook(screen.orientation,"addEventListener",function() { var array = ['change']; if (array.indexOf(arguments[0]) >= 0 ){ if (arguments[1] != 'function (event) {event.stopImmediatePropagation();}') window.dispatchEvent(new CustomEvent("getChromeData", {detail: "change"})); } });
